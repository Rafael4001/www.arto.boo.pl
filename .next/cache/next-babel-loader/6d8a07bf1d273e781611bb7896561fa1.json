{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\IT_projects_Edu-Lab\\\\www.zespolarto.pl\\\\src\\\\components\\\\TrackContainer\\\\TrackContainer.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport classNames from 'classnames';\nimport { withMediaProps } from 'react-media-player';\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\nimport PauseCircleFilledIcon from '@material-ui/icons/PauseCircleFilled';\nimport Button from \"@material-ui/core/Button\";\nimport { SONGS_IMAGES } from \"../../constants\";\nimport Image from \"../Image\";\n\nvar TrackContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TrackContainer, _Component);\n\n  function TrackContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TrackContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TrackContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePlayClick\", function () {\n      _this.props.onClickPlay();\n\n      _this.props.media.play();\n    });\n\n    return _this;\n  }\n\n  _createClass(TrackContainer, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(_ref) {\n      var media = _ref.media;\n      return this.props.media.isPlaying !== media.isPlaying;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          track = _this$props.track,\n          actualPlayingTrackMp3Name = _this$props.actualPlayingTrackMp3Name,\n          media = _this$props.media;\n      console.log('media', media);\n      var trackImage = track.imgSrc ? track.imgSrc : SONGS_IMAGES.DefaultSongImage;\n      return __jsx(\"div\", {\n        className: classNames(classes.mainContainer, _defineProperty({}, classes.activeBackground, actualPlayingTrackMp3Name === track.mp3Name)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: classes.songImage,\n        onClick: actualPlayingTrackMp3Name === track.mp3Name && media.isPlaying ? media.pause : this.handlePlayClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, __jsx(Image, {\n        imgSrc: trackImage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      })), actualPlayingTrackMp3Name === track.mp3Name && media.isPlaying ? __jsx(Button, {\n        className: classes.myButton,\n        key: track.mp3Name,\n        onClick: media.pause,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, __jsx(PauseCircleFilledIcon, {\n        className: classes.buttonIcon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      })) : __jsx(Button, {\n        className: classes.myButton,\n        key: track.mp3Name,\n        onClick: this.handlePlayClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, __jsx(PlayCircleFilledIcon, {\n        className: classes.buttonIcon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      })), __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: classes.trackName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, track.name), __jsx(\"div\", {\n        className: classes.trackArtistText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"(\", track.artist && \" - \".concat(track.artist), \")\")));\n    }\n  }]);\n\n  return TrackContainer;\n}(Component);\n\nTrackContainer.propTypes = {\n  classes: PropTypes.object.isRequired,\n  track: PropTypes.object.isRequired,\n  onClick: PropTypes.func.isRequired,\n  actualPlayingTrackMp3Name: PropTypes.string\n};\nTrackContainer.displayName = 'TrackContainer';\nexport default withMediaProps(TrackContainer);","map":{"version":3,"sources":["C:/IT_projects_Edu-Lab/www.zespolarto.pl/src/components/TrackContainer/TrackContainer.js"],"names":["React","Component","PropTypes","classNames","withMediaProps","PlayCircleFilledIcon","PauseCircleFilledIcon","Button","SONGS_IMAGES","Image","TrackContainer","props","onClickPlay","media","play","isPlaying","classes","track","actualPlayingTrackMp3Name","console","log","trackImage","imgSrc","DefaultSongImage","mainContainer","activeBackground","mp3Name","songImage","pause","handlePlayClick","myButton","buttonIcon","trackName","name","trackArtistText","artist","propTypes","object","isRequired","onClick","func","string","displayName"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from \"prop-types\";\r\nimport classNames from 'classnames';\r\nimport { withMediaProps } from 'react-media-player'\r\n\r\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\r\nimport PauseCircleFilledIcon from '@material-ui/icons/PauseCircleFilled';\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport { SONGS_IMAGES } from \"../../constants\";\r\n\r\nimport Image from \"../Image\";\r\n\r\n\r\nclass TrackContainer extends Component {\r\n  shouldComponentUpdate({media}) {\r\n    return this.props.media.isPlaying !== media.isPlaying\r\n  }\r\n\r\n  handlePlayClick = () => {\r\n    this.props.onClickPlay();\r\n    this.props.media.play()\r\n  };\r\n\r\n\r\n  render() {\r\n    const {classes, track, actualPlayingTrackMp3Name, media} = this.props;\r\n    console.log('media', media)\r\n\r\n    const trackImage = track.imgSrc ? track.imgSrc : SONGS_IMAGES.DefaultSongImage;\r\n\r\n    return (\r\n      <div className={classNames(\r\n        classes.mainContainer,\r\n        {[classes.activeBackground]: actualPlayingTrackMp3Name === track.mp3Name}\r\n      )}>\r\n        <div\r\n          className={classes.songImage}\r\n          onClick={(actualPlayingTrackMp3Name === track.mp3Name && media.isPlaying) ? media.pause : this.handlePlayClick }\r\n        >\r\n          <Image imgSrc={trackImage}/>\r\n        </div>\r\n        {actualPlayingTrackMp3Name === track.mp3Name && media.isPlaying ?\r\n          (<Button\r\n            className={classes.myButton}\r\n            key={track.mp3Name}\r\n            onClick={media.pause}\r\n          >\r\n            <PauseCircleFilledIcon className={classes.buttonIcon}/>\r\n          </Button>)\r\n          :\r\n          (<Button\r\n            className={classes.myButton}\r\n            key={track.mp3Name}\r\n            onClick={this.handlePlayClick}\r\n          >\r\n            <PlayCircleFilledIcon className={classes.buttonIcon}/>\r\n          </Button>)\r\n        }\r\n        <div>\r\n          <div className={classes.trackName}>{track.name}</div>\r\n\r\n          <div className={classes.trackArtistText}>({track.artist && ` - ${track.artist}`})</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nTrackContainer.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  track: PropTypes.object.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n  actualPlayingTrackMp3Name: PropTypes.string,\r\n};\r\n\r\nTrackContainer.displayName = 'TrackContainer';\r\n\r\n\r\nexport default withMediaProps(TrackContainer)\r\n"]},"metadata":{},"sourceType":"module"}