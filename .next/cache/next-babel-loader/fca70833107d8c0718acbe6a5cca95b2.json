{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime-corejs2/regenerator\");\n\nvar _asyncToGenerator = require(\"@babel/runtime-corejs2/helpers/asyncToGenerator\");\n\nvar _slicedToArray = require(\"@babel/runtime-corejs2/helpers/slicedToArray\");\n\nvar _Promise = require(\"@babel/runtime-corejs2/core-js/promise\");\n\nvar _Object$assign = require(\"@babel/runtime-corejs2/core-js/object/assign\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst url_1 = require(\"url\");\n\nconst mitt_1 = __importDefault(require(\"../mitt\"));\n\nconst utils_1 = require(\"../utils\");\n\nconst rewrite_url_for_export_1 = require(\"./rewrite-url-for-export\");\n\nconst route_matcher_1 = require(\"./utils/route-matcher\");\n\nconst route_regex_1 = require(\"./utils/route-regex\");\n\nconst is_dynamic_1 = require(\"./utils/is-dynamic\");\n\nfunction toRoute(path) {\n  return path.replace(/\\/$/, '') || '/';\n}\n\nclass Router {\n  constructor(pathname, query, as, {\n    initialProps,\n    pageLoader,\n    App,\n    wrapApp,\n    Component,\n    err,\n    subscription\n  }) {\n    this.onPopState = e => {\n      if (!e.state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        const pathname = this.pathname,\n              query = this.query;\n        this.changeState('replaceState', utils_1.formatWithValidation({\n          pathname,\n          query\n        }), utils_1.getURL());\n        return;\n      } // Make sure we don't re-render on initial load,\n      // can be caused by navigating back from an external site\n\n\n      if (e.state.options && e.state.options.fromExternal) {\n        return;\n      } // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n\n\n      if (this._bps && !this._bps(e.state)) {\n        return;\n      }\n\n      const _e$state = e.state,\n            url = _e$state.url,\n            as = _e$state.as,\n            options = _e$state.options;\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (typeof url === 'undefined' || typeof as === 'undefined') {\n          console.warn('`popstate` event triggered but `event.state` did not have `url` or `as` https://err.sh/zeit/next.js/popstate-state-empty');\n        }\n      }\n\n      this.replace(url, as, options);\n    }; // represents the current component key\n\n\n    this.route = toRoute(pathname); // set up the component cache (by route keys)\n\n    this.components = {}; // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n\n    if (pathname !== '/_error') {\n      this.components[this.route] = {\n        Component,\n        props: initialProps,\n        err\n      };\n    }\n\n    this.components['/_app'] = {\n      Component: App\n    }; // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n    // @ts-ignore backwards compatibility\n\n    this.events = Router.events;\n    this.pageLoader = pageLoader;\n    this.pathname = pathname;\n    this.query = query; // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n\n    this.asPath = // @ts-ignore this is temporarily global (attached to window)\n    is_dynamic_1.isDynamicRoute(pathname) && __NEXT_DATA__.nextExport ? pathname : as;\n    this.sub = subscription;\n    this.clc = null;\n    this._wrapApp = wrapApp;\n\n    if (true) {\n      // in order for `e.state` to work on the `onpopstate` event\n      // we have to register the initial route upon initialization\n      this.changeState('replaceState', utils_1.formatWithValidation({\n        pathname,\n        query\n      }), as);\n      window.addEventListener('popstate', this.onPopState);\n      window.addEventListener('unload', () => {\n        // Workaround for popstate firing on initial page load when\n        // navigating back from an external site\n        if (history.state) {\n          const _history$state = history.state,\n                url = _history$state.url,\n                as = _history$state.as,\n                options = _history$state.options;\n          this.changeState('replaceState', url, as, _Object$assign({}, options, {\n            fromExternal: true\n          }));\n        }\n      });\n    }\n  } // @deprecated backwards compatibility even though it's a private method.\n\n\n  static _rewriteUrlForNextExport(url) {\n    return rewrite_url_for_export_1.rewriteUrlForNextExport(url);\n  }\n\n  update(route, mod) {\n    const Component = mod.default || mod;\n    const data = this.components[route];\n\n    if (!data) {\n      throw new Error(\"Cannot update unavailable route: \".concat(route));\n    }\n\n    const newData = _Object$assign({}, data, {\n      Component\n    });\n\n    this.components[route] = newData; // pages/_app.js updated\n\n    if (route === '/_app') {\n      this.notify(this.components[this.route]);\n      return;\n    }\n\n    if (route === this.route) {\n      this.notify(newData);\n    }\n  }\n\n  reload() {\n    window.location.reload();\n  }\n  /**\n   * Go back in history\n   */\n\n\n  back() {\n    window.history.back();\n  }\n  /**\n   * Performs a `pushState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */\n\n\n  push(url, as = url, options = {}) {\n    return this.change('pushState', url, as, options);\n  }\n  /**\n   * Performs a `replaceState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */\n\n\n  replace(url, as = url, options = {}) {\n    return this.change('replaceState', url, as, options);\n  }\n\n  change(method, _url, _as, options) {\n    return new _Promise((resolve, reject) => {\n      // marking route changes as a navigation start entry\n      if (utils_1.SUPPORTS_PERFORMANCE_USER_TIMING) {\n        performance.mark('routeChange');\n      } // If url and as provided as an object representation,\n      // we'll format them into the string version here.\n\n\n      const url = typeof _url === 'object' ? utils_1.formatWithValidation(_url) : _url;\n      let as = typeof _as === 'object' ? utils_1.formatWithValidation(_as) : _as; // Add the ending slash to the paths. So, we can serve the\n      // \"<page>/index.html\" directly for the SSR page.\n\n      if (process.env.__NEXT_EXPORT_TRAILING_SLASH) {\n        // @ts-ignore this is temporarily global (attached to window)\n        if (__NEXT_DATA__.nextExport) {\n          as = rewrite_url_for_export_1.rewriteUrlForNextExport(as);\n        }\n      }\n\n      this.abortComponentLoad(as); // If the url change is only related to a hash change\n      // We should not proceed. We should only change the state.\n      // WARNING: `_h` is an internal option for handing Next.js client-side\n      // hydration. Your app should _never_ use this property. It may change at\n      // any time without notice.\n\n      if (!options._h && this.onlyAHashChange(as)) {\n        this.asPath = as;\n        Router.events.emit('hashChangeStart', as);\n        this.changeState(method, url, as);\n        this.scrollToHash(as);\n        Router.events.emit('hashChangeComplete', as);\n        return resolve(true);\n      }\n\n      const _url_1$parse = url_1.parse(url, true),\n            pathname = _url_1$parse.pathname,\n            query = _url_1$parse.query,\n            protocol = _url_1$parse.protocol;\n\n      if (!pathname || protocol) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\"Invalid href passed to router: \".concat(url, \" https://err.sh/zeit/next.js/invalid-href-passed\"));\n        }\n\n        return resolve(false);\n      } // If asked to change the current URL we should reload the current page\n      // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n      // We also need to set the method = replaceState always\n      // as this should not go into the history (That's how browsers work)\n      // We should compare the new asPath to the current asPath, not the url\n\n\n      if (!this.urlIsNew(as)) {\n        method = 'replaceState';\n      } // @ts-ignore pathname is always a string\n\n\n      const route = toRoute(pathname);\n      const _options$shallow = options.shallow,\n            shallow = _options$shallow === void 0 ? false : _options$shallow;\n\n      if (is_dynamic_1.isDynamicRoute(route)) {\n        const _url_1$parse2 = url_1.parse(as),\n              asPathname = _url_1$parse2.pathname;\n\n        const rr = route_regex_1.getRouteRegex(route);\n        const routeMatch = route_matcher_1.getRouteMatcher(rr)(asPathname);\n\n        if (!routeMatch) {\n          const error = 'The provided `as` value is incompatible with the `href` value. This is invalid. https://err.sh/zeit/next.js/incompatible-href-as';\n\n          if (process.env.NODE_ENV !== 'production') {\n            throw new Error(error);\n          } else {\n            console.error(error);\n          }\n\n          return resolve(false);\n        } // Merge params into `query`, overwriting any specified in search\n\n\n        _Object$assign(query, routeMatch);\n      }\n\n      Router.events.emit('routeChangeStart', as); // If shallow is true and the route exists in the router cache we reuse the previous result\n      // @ts-ignore pathname is always a string\n\n      this.getRouteInfo(route, pathname, query, as, shallow).then(routeInfo => {\n        const error = routeInfo.error;\n\n        if (error && error.cancelled) {\n          return resolve(false);\n        }\n\n        Router.events.emit('beforeHistoryChange', as);\n        this.changeState(method, url, as, options);\n        const hash = window.location.hash.substring(1);\n\n        if (process.env.NODE_ENV !== 'production') {\n          const appComp = this.components['/_app'].Component;\n          window.next.isPrerendered = appComp.getInitialProps === appComp.origGetInitialProps && !routeInfo.Component.getInitialProps;\n        } // @ts-ignore pathname is always defined\n\n\n        this.set(route, pathname, query, as, _Object$assign({}, routeInfo, {\n          hash\n        }));\n\n        if (error) {\n          Router.events.emit('routeChangeError', error, as);\n          throw error;\n        }\n\n        Router.events.emit('routeChangeComplete', as);\n        return resolve(true);\n      }, reject);\n    });\n  }\n\n  changeState(method, url, as, options = {}) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof window.history === 'undefined') {\n        console.error(\"Warning: window.history is not available.\");\n        return;\n      } // @ts-ignore method should always exist on history\n\n\n      if (typeof window.history[method] === 'undefined') {\n        console.error(\"Warning: window.history.\".concat(method, \" is not available\"));\n        return;\n      }\n    }\n\n    if (method !== 'pushState' || utils_1.getURL() !== as) {\n      // @ts-ignore method should always exist on history\n      window.history[method]({\n        url,\n        as,\n        options\n      }, null, as);\n    }\n  }\n\n  getRouteInfo(route, pathname, query, as, shallow = false) {\n    const cachedRouteInfo = this.components[route]; // If there is a shallow route transition possible\n    // If the route is already rendered on the screen.\n\n    if (shallow && cachedRouteInfo && this.route === route) {\n      return _Promise.resolve(cachedRouteInfo);\n    }\n\n    return new _Promise((resolve, reject) => {\n      if (cachedRouteInfo) {\n        return resolve(cachedRouteInfo);\n      }\n\n      this.fetchComponent(route).then(Component => resolve({\n        Component\n      }), reject);\n    }).then(routeInfo => {\n      const Component = routeInfo.Component;\n\n      if (process.env.NODE_ENV !== 'production') {\n        const _require = require('react-is'),\n              isValidElementType = _require.isValidElementType;\n\n        if (!isValidElementType(Component)) {\n          throw new Error(\"The default export is not a React Component in page: \\\"\".concat(pathname, \"\\\"\"));\n        }\n      }\n\n      return new _Promise((resolve, reject) => {\n        // we provide AppTree later so this needs to be `any`\n        this.getInitialProps(Component, {\n          pathname,\n          query,\n          asPath: as\n        }).then(props => {\n          routeInfo.props = props;\n          this.components[route] = routeInfo;\n          resolve(routeInfo);\n        }, reject);\n      });\n    }).catch(err => {\n      return new _Promise(resolve => {\n        if (err.code === 'PAGE_LOAD_ERROR') {\n          // If we can't load the page it could be one of following reasons\n          //  1. Page doesn't exists\n          //  2. Page does exist in a different zone\n          //  3. Internal error while loading the page\n          // So, doing a hard reload is the proper way to deal with this.\n          window.location.href = as; // Changing the URL doesn't block executing the current code path.\n          // So, we need to mark it as a cancelled error and stop the routing logic.\n\n          err.cancelled = true; // @ts-ignore TODO: fix the control flow here\n\n          return resolve({\n            error: err\n          });\n        }\n\n        if (err.cancelled) {\n          // @ts-ignore TODO: fix the control flow here\n          return resolve({\n            error: err\n          });\n        }\n\n        resolve(this.fetchComponent('/_error').then(Component => {\n          const routeInfo = {\n            Component,\n            err\n          };\n          return new _Promise(resolve => {\n            this.getInitialProps(Component, {\n              err,\n              pathname,\n              query\n            }).then(props => {\n              routeInfo.props = props;\n              routeInfo.error = err;\n              resolve(routeInfo);\n            }, gipErr => {\n              console.error('Error in error page `getInitialProps`: ', gipErr);\n              routeInfo.error = err;\n              routeInfo.props = {};\n              resolve(routeInfo);\n            });\n          });\n        }));\n      });\n    });\n  }\n\n  set(route, pathname, query, as, data) {\n    this.route = route;\n    this.pathname = pathname;\n    this.query = query;\n    this.asPath = as;\n    this.notify(data);\n  }\n  /**\n   * Callback to execute before replacing router state\n   * @param cb callback to be executed\n   */\n\n\n  beforePopState(cb) {\n    this._bps = cb;\n  }\n\n  onlyAHashChange(as) {\n    if (!this.asPath) return false;\n\n    const _this$asPath$split = this.asPath.split('#'),\n          _this$asPath$split2 = _slicedToArray(_this$asPath$split, 2),\n          oldUrlNoHash = _this$asPath$split2[0],\n          oldHash = _this$asPath$split2[1];\n\n    const _as$split = as.split('#'),\n          _as$split2 = _slicedToArray(_as$split, 2),\n          newUrlNoHash = _as$split2[0],\n          newHash = _as$split2[1]; // Makes sure we scroll to the provided hash if the url/hash are the same\n\n\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true;\n    } // If the urls are change, there's more than a hash change\n\n\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false;\n    } // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n\n\n    return oldHash !== newHash;\n  }\n\n  scrollToHash(as) {\n    const _as$split3 = as.split('#'),\n          _as$split4 = _slicedToArray(_as$split3, 2),\n          hash = _as$split4[1]; // Scroll to top if the hash is just `#` with no value\n\n\n    if (hash === '') {\n      window.scrollTo(0, 0);\n      return;\n    } // First we check if the element by id is found\n\n\n    const idEl = document.getElementById(hash);\n\n    if (idEl) {\n      idEl.scrollIntoView();\n      return;\n    } // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n\n\n    const nameEl = document.getElementsByName(hash)[0];\n\n    if (nameEl) {\n      nameEl.scrollIntoView();\n    }\n  }\n\n  urlIsNew(asPath) {\n    return this.asPath !== asPath;\n  }\n  /**\n   * Prefetch `page` code, you may wait for the data during `page` rendering.\n   * This feature only works in production!\n   * @param url of prefetched `page`\n   */\n\n\n  prefetch(url) {\n    return new _Promise((resolve, reject) => {\n      const _url_1$parse3 = url_1.parse(url),\n            pathname = _url_1$parse3.pathname,\n            protocol = _url_1$parse3.protocol;\n\n      if (!pathname || protocol) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\"Invalid href passed to router: \".concat(url, \" https://err.sh/zeit/next.js/invalid-href-passed\"));\n        }\n\n        return;\n      } // Prefetch is not supported in development mode because it would trigger on-demand-entries\n\n\n      if (process.env.NODE_ENV !== 'production') return; // @ts-ignore pathname is always defined\n\n      const route = toRoute(pathname);\n      this.pageLoader.prefetch(route).then(resolve, reject);\n    });\n  }\n\n  fetchComponent(route) {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var cancelled, cancel, Component, error;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            cancelled = false;\n\n            cancel = _this.clc = () => {\n              cancelled = true;\n            };\n\n            _context.next = 4;\n            return _this.pageLoader.loadPage(route);\n\n          case 4:\n            Component = _context.sent;\n\n            if (!cancelled) {\n              _context.next = 9;\n              break;\n            }\n\n            error = new Error(\"Abort fetching component for route: \\\"\".concat(route, \"\\\"\"));\n            error.cancelled = true;\n            throw error;\n\n          case 9:\n            if (cancel === _this.clc) {\n              _this.clc = null;\n            }\n\n            return _context.abrupt(\"return\", Component);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  getInitialProps(Component, ctx) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var cancelled, cancel, App, props, status, _url_1$parse4, pathname, AppTree, err;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            cancelled = false;\n\n            cancel = () => {\n              cancelled = true;\n            };\n\n            _this2.clc = cancel;\n            App = _this2.components['/_app'].Component;\n\n            if (!( // @ts-ignore workaround for dead-code elimination\n            (self.__HAS_SPR || process.env.NODE_ENV !== 'production') && Component.__NEXT_SPR)) {\n              _context2.next = 12;\n              break;\n            }\n\n            // pathname should have leading slash\n            _url_1$parse4 = url_1.parse(ctx.asPath || ctx.pathname), pathname = _url_1$parse4.pathname;\n            pathname = !pathname || pathname === '/' ? '/index' : pathname;\n            _context2.next = 9;\n            return fetch( // @ts-ignore __NEXT_DATA__\n            \"/_next/data/\".concat(__NEXT_DATA__.buildId).concat(pathname, \".json\")).then(res => {\n              if (!res.ok) {\n                status = res.status;\n                throw new Error('failed to load prerender data');\n              }\n\n              return res.json();\n            }).catch(err => {\n              console.error(\"Failed to load data\", status, err);\n              window.location.href = pathname;\n              return new _Promise(() => {});\n            });\n\n          case 9:\n            props = _context2.sent;\n            _context2.next = 17;\n            break;\n\n          case 12:\n            AppTree = _this2._wrapApp(App);\n            ctx.AppTree = AppTree;\n            _context2.next = 16;\n            return utils_1.loadGetInitialProps(App, {\n              AppTree,\n              Component,\n              router: _this2,\n              ctx\n            });\n\n          case 16:\n            props = _context2.sent;\n\n          case 17:\n            if (cancel === _this2.clc) {\n              _this2.clc = null;\n            }\n\n            if (!cancelled) {\n              _context2.next = 22;\n              break;\n            }\n\n            err = new Error('Loading initial props cancelled');\n            err.cancelled = true;\n            throw err;\n\n          case 22:\n            return _context2.abrupt(\"return\", props);\n\n          case 23:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  }\n\n  abortComponentLoad(as) {\n    if (this.clc) {\n      const e = new Error('Route Cancelled');\n      e.cancelled = true;\n      Router.events.emit('routeChangeError', e, as);\n      this.clc();\n      this.clc = null;\n    }\n  }\n\n  notify(data) {\n    this.sub(data, this.components['/_app'].Component);\n  }\n\n}\n\nRouter.events = mitt_1.default();\nexports.default = Router;","map":{"version":3,"sources":["D:/IT_projects/zespolarto.pl/node_modules/next/dist/next-server/lib/router/router.js"],"names":["__importDefault","mod","__esModule","exports","value","url_1","require","mitt_1","utils_1","rewrite_url_for_export_1","route_matcher_1","route_regex_1","is_dynamic_1","toRoute","path","replace","Router","constructor","pathname","query","as","initialProps","pageLoader","App","wrapApp","Component","err","subscription","onPopState","e","state","changeState","formatWithValidation","getURL","options","fromExternal","_bps","url","process","env","NODE_ENV","console","warn","route","components","props","events","asPath","isDynamicRoute","__NEXT_DATA__","nextExport","sub","clc","_wrapApp","window","addEventListener","history","_rewriteUrlForNextExport","rewriteUrlForNextExport","update","default","data","Error","newData","notify","reload","location","back","push","change","method","_url","_as","resolve","reject","SUPPORTS_PERFORMANCE_USER_TIMING","performance","mark","__NEXT_EXPORT_TRAILING_SLASH","abortComponentLoad","_h","onlyAHashChange","emit","scrollToHash","parse","protocol","urlIsNew","shallow","asPathname","rr","getRouteRegex","routeMatch","getRouteMatcher","error","getRouteInfo","then","routeInfo","cancelled","hash","substring","appComp","next","isPrerendered","getInitialProps","origGetInitialProps","set","cachedRouteInfo","fetchComponent","isValidElementType","catch","code","href","gipErr","beforePopState","cb","split","oldUrlNoHash","oldHash","newUrlNoHash","newHash","scrollTo","idEl","document","getElementById","scrollIntoView","nameEl","getElementsByName","prefetch","cancel","loadPage","ctx","self","__HAS_SPR","__NEXT_SPR","fetch","buildId","res","ok","status","json","AppTree","loadGetInitialProps","router"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst url_1 = require(\"url\");\nconst mitt_1 = __importDefault(require(\"../mitt\"));\nconst utils_1 = require(\"../utils\");\nconst rewrite_url_for_export_1 = require(\"./rewrite-url-for-export\");\nconst route_matcher_1 = require(\"./utils/route-matcher\");\nconst route_regex_1 = require(\"./utils/route-regex\");\nconst is_dynamic_1 = require(\"./utils/is-dynamic\");\nfunction toRoute(path) {\n    return path.replace(/\\/$/, '') || '/';\n}\nclass Router {\n    constructor(pathname, query, as, { initialProps, pageLoader, App, wrapApp, Component, err, subscription, }) {\n        this.onPopState = (e) => {\n            if (!e.state) {\n                // We get state as undefined for two reasons.\n                //  1. With older safari (< 8) and older chrome (< 34)\n                //  2. When the URL changed with #\n                //\n                // In the both cases, we don't need to proceed and change the route.\n                // (as it's already changed)\n                // But we can simply replace the state with the new changes.\n                // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n                // So, doing the following for (1) does no harm.\n                const { pathname, query } = this;\n                this.changeState('replaceState', utils_1.formatWithValidation({ pathname, query }), utils_1.getURL());\n                return;\n            }\n            // Make sure we don't re-render on initial load,\n            // can be caused by navigating back from an external site\n            if (e.state.options && e.state.options.fromExternal) {\n                return;\n            }\n            // If the downstream application returns falsy, return.\n            // They will then be responsible for handling the event.\n            if (this._bps && !this._bps(e.state)) {\n                return;\n            }\n            const { url, as, options } = e.state;\n            if (process.env.NODE_ENV !== 'production') {\n                if (typeof url === 'undefined' || typeof as === 'undefined') {\n                    console.warn('`popstate` event triggered but `event.state` did not have `url` or `as` https://err.sh/zeit/next.js/popstate-state-empty');\n                }\n            }\n            this.replace(url, as, options);\n        };\n        // represents the current component key\n        this.route = toRoute(pathname);\n        // set up the component cache (by route keys)\n        this.components = {};\n        // We should not keep the cache, if there's an error\n        // Otherwise, this cause issues when when going back and\n        // come again to the errored page.\n        if (pathname !== '/_error') {\n            this.components[this.route] = { Component, props: initialProps, err };\n        }\n        this.components['/_app'] = { Component: App };\n        // Backwards compat for Router.router.events\n        // TODO: Should be remove the following major version as it was never documented\n        // @ts-ignore backwards compatibility\n        this.events = Router.events;\n        this.pageLoader = pageLoader;\n        this.pathname = pathname;\n        this.query = query;\n        // if auto prerendered and dynamic route wait to update asPath\n        // until after mount to prevent hydration mismatch\n        this.asPath =\n            // @ts-ignore this is temporarily global (attached to window)\n            is_dynamic_1.isDynamicRoute(pathname) && __NEXT_DATA__.nextExport ? pathname : as;\n        this.sub = subscription;\n        this.clc = null;\n        this._wrapApp = wrapApp;\n        if (typeof window !== 'undefined') {\n            // in order for `e.state` to work on the `onpopstate` event\n            // we have to register the initial route upon initialization\n            this.changeState('replaceState', utils_1.formatWithValidation({ pathname, query }), as);\n            window.addEventListener('popstate', this.onPopState);\n            window.addEventListener('unload', () => {\n                // Workaround for popstate firing on initial page load when\n                // navigating back from an external site\n                if (history.state) {\n                    const { url, as, options } = history.state;\n                    this.changeState('replaceState', url, as, Object.assign({}, options, { fromExternal: true }));\n                }\n            });\n        }\n    }\n    // @deprecated backwards compatibility even though it's a private method.\n    static _rewriteUrlForNextExport(url) {\n        return rewrite_url_for_export_1.rewriteUrlForNextExport(url);\n    }\n    update(route, mod) {\n        const Component = mod.default || mod;\n        const data = this.components[route];\n        if (!data) {\n            throw new Error(`Cannot update unavailable route: ${route}`);\n        }\n        const newData = Object.assign({}, data, { Component });\n        this.components[route] = newData;\n        // pages/_app.js updated\n        if (route === '/_app') {\n            this.notify(this.components[this.route]);\n            return;\n        }\n        if (route === this.route) {\n            this.notify(newData);\n        }\n    }\n    reload() {\n        window.location.reload();\n    }\n    /**\n     * Go back in history\n     */\n    back() {\n        window.history.back();\n    }\n    /**\n     * Performs a `pushState` with arguments\n     * @param url of the route\n     * @param as masks `url` for the browser\n     * @param options object you can define `shallow` and other options\n     */\n    push(url, as = url, options = {}) {\n        return this.change('pushState', url, as, options);\n    }\n    /**\n     * Performs a `replaceState` with arguments\n     * @param url of the route\n     * @param as masks `url` for the browser\n     * @param options object you can define `shallow` and other options\n     */\n    replace(url, as = url, options = {}) {\n        return this.change('replaceState', url, as, options);\n    }\n    change(method, _url, _as, options) {\n        return new Promise((resolve, reject) => {\n            // marking route changes as a navigation start entry\n            if (utils_1.SUPPORTS_PERFORMANCE_USER_TIMING) {\n                performance.mark('routeChange');\n            }\n            // If url and as provided as an object representation,\n            // we'll format them into the string version here.\n            const url = typeof _url === 'object' ? utils_1.formatWithValidation(_url) : _url;\n            let as = typeof _as === 'object' ? utils_1.formatWithValidation(_as) : _as;\n            // Add the ending slash to the paths. So, we can serve the\n            // \"<page>/index.html\" directly for the SSR page.\n            if (process.env.__NEXT_EXPORT_TRAILING_SLASH) {\n                // @ts-ignore this is temporarily global (attached to window)\n                if (__NEXT_DATA__.nextExport) {\n                    as = rewrite_url_for_export_1.rewriteUrlForNextExport(as);\n                }\n            }\n            this.abortComponentLoad(as);\n            // If the url change is only related to a hash change\n            // We should not proceed. We should only change the state.\n            // WARNING: `_h` is an internal option for handing Next.js client-side\n            // hydration. Your app should _never_ use this property. It may change at\n            // any time without notice.\n            if (!options._h && this.onlyAHashChange(as)) {\n                this.asPath = as;\n                Router.events.emit('hashChangeStart', as);\n                this.changeState(method, url, as);\n                this.scrollToHash(as);\n                Router.events.emit('hashChangeComplete', as);\n                return resolve(true);\n            }\n            const { pathname, query, protocol } = url_1.parse(url, true);\n            if (!pathname || protocol) {\n                if (process.env.NODE_ENV !== 'production') {\n                    throw new Error(`Invalid href passed to router: ${url} https://err.sh/zeit/next.js/invalid-href-passed`);\n                }\n                return resolve(false);\n            }\n            // If asked to change the current URL we should reload the current page\n            // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n            // We also need to set the method = replaceState always\n            // as this should not go into the history (That's how browsers work)\n            // We should compare the new asPath to the current asPath, not the url\n            if (!this.urlIsNew(as)) {\n                method = 'replaceState';\n            }\n            // @ts-ignore pathname is always a string\n            const route = toRoute(pathname);\n            const { shallow = false } = options;\n            if (is_dynamic_1.isDynamicRoute(route)) {\n                const { pathname: asPathname } = url_1.parse(as);\n                const rr = route_regex_1.getRouteRegex(route);\n                const routeMatch = route_matcher_1.getRouteMatcher(rr)(asPathname);\n                if (!routeMatch) {\n                    const error = 'The provided `as` value is incompatible with the `href` value. This is invalid. https://err.sh/zeit/next.js/incompatible-href-as';\n                    if (process.env.NODE_ENV !== 'production') {\n                        throw new Error(error);\n                    }\n                    else {\n                        console.error(error);\n                    }\n                    return resolve(false);\n                }\n                // Merge params into `query`, overwriting any specified in search\n                Object.assign(query, routeMatch);\n            }\n            Router.events.emit('routeChangeStart', as);\n            // If shallow is true and the route exists in the router cache we reuse the previous result\n            // @ts-ignore pathname is always a string\n            this.getRouteInfo(route, pathname, query, as, shallow).then(routeInfo => {\n                const { error } = routeInfo;\n                if (error && error.cancelled) {\n                    return resolve(false);\n                }\n                Router.events.emit('beforeHistoryChange', as);\n                this.changeState(method, url, as, options);\n                const hash = window.location.hash.substring(1);\n                if (process.env.NODE_ENV !== 'production') {\n                    const appComp = this.components['/_app'].Component;\n                    window.next.isPrerendered =\n                        appComp.getInitialProps === appComp.origGetInitialProps &&\n                            !routeInfo.Component.getInitialProps;\n                }\n                // @ts-ignore pathname is always defined\n                this.set(route, pathname, query, as, Object.assign({}, routeInfo, { hash }));\n                if (error) {\n                    Router.events.emit('routeChangeError', error, as);\n                    throw error;\n                }\n                Router.events.emit('routeChangeComplete', as);\n                return resolve(true);\n            }, reject);\n        });\n    }\n    changeState(method, url, as, options = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (typeof window.history === 'undefined') {\n                console.error(`Warning: window.history is not available.`);\n                return;\n            }\n            // @ts-ignore method should always exist on history\n            if (typeof window.history[method] === 'undefined') {\n                console.error(`Warning: window.history.${method} is not available`);\n                return;\n            }\n        }\n        if (method !== 'pushState' || utils_1.getURL() !== as) {\n            // @ts-ignore method should always exist on history\n            window.history[method]({ url, as, options }, null, as);\n        }\n    }\n    getRouteInfo(route, pathname, query, as, shallow = false) {\n        const cachedRouteInfo = this.components[route];\n        // If there is a shallow route transition possible\n        // If the route is already rendered on the screen.\n        if (shallow && cachedRouteInfo && this.route === route) {\n            return Promise.resolve(cachedRouteInfo);\n        }\n        return new Promise((resolve, reject) => {\n            if (cachedRouteInfo) {\n                return resolve(cachedRouteInfo);\n            }\n            this.fetchComponent(route).then(Component => resolve({ Component }), reject);\n        })\n            .then((routeInfo) => {\n            const { Component } = routeInfo;\n            if (process.env.NODE_ENV !== 'production') {\n                const { isValidElementType } = require('react-is');\n                if (!isValidElementType(Component)) {\n                    throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\n                }\n            }\n            return new Promise((resolve, reject) => {\n                // we provide AppTree later so this needs to be `any`\n                this.getInitialProps(Component, {\n                    pathname,\n                    query,\n                    asPath: as,\n                }).then(props => {\n                    routeInfo.props = props;\n                    this.components[route] = routeInfo;\n                    resolve(routeInfo);\n                }, reject);\n            });\n        })\n            .catch(err => {\n            return new Promise(resolve => {\n                if (err.code === 'PAGE_LOAD_ERROR') {\n                    // If we can't load the page it could be one of following reasons\n                    //  1. Page doesn't exists\n                    //  2. Page does exist in a different zone\n                    //  3. Internal error while loading the page\n                    // So, doing a hard reload is the proper way to deal with this.\n                    window.location.href = as;\n                    // Changing the URL doesn't block executing the current code path.\n                    // So, we need to mark it as a cancelled error and stop the routing logic.\n                    err.cancelled = true;\n                    // @ts-ignore TODO: fix the control flow here\n                    return resolve({ error: err });\n                }\n                if (err.cancelled) {\n                    // @ts-ignore TODO: fix the control flow here\n                    return resolve({ error: err });\n                }\n                resolve(this.fetchComponent('/_error').then(Component => {\n                    const routeInfo = { Component, err };\n                    return new Promise(resolve => {\n                        this.getInitialProps(Component, {\n                            err,\n                            pathname,\n                            query,\n                        }).then(props => {\n                            routeInfo.props = props;\n                            routeInfo.error = err;\n                            resolve(routeInfo);\n                        }, gipErr => {\n                            console.error('Error in error page `getInitialProps`: ', gipErr);\n                            routeInfo.error = err;\n                            routeInfo.props = {};\n                            resolve(routeInfo);\n                        });\n                    });\n                }));\n            });\n        });\n    }\n    set(route, pathname, query, as, data) {\n        this.route = route;\n        this.pathname = pathname;\n        this.query = query;\n        this.asPath = as;\n        this.notify(data);\n    }\n    /**\n     * Callback to execute before replacing router state\n     * @param cb callback to be executed\n     */\n    beforePopState(cb) {\n        this._bps = cb;\n    }\n    onlyAHashChange(as) {\n        if (!this.asPath)\n            return false;\n        const [oldUrlNoHash, oldHash] = this.asPath.split('#');\n        const [newUrlNoHash, newHash] = as.split('#');\n        // Makes sure we scroll to the provided hash if the url/hash are the same\n        if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n            return true;\n        }\n        // If the urls are change, there's more than a hash change\n        if (oldUrlNoHash !== newUrlNoHash) {\n            return false;\n        }\n        // If the hash has changed, then it's a hash only change.\n        // This check is necessary to handle both the enter and\n        // leave hash === '' cases. The identity case falls through\n        // and is treated as a next reload.\n        return oldHash !== newHash;\n    }\n    scrollToHash(as) {\n        const [, hash] = as.split('#');\n        // Scroll to top if the hash is just `#` with no value\n        if (hash === '') {\n            window.scrollTo(0, 0);\n            return;\n        }\n        // First we check if the element by id is found\n        const idEl = document.getElementById(hash);\n        if (idEl) {\n            idEl.scrollIntoView();\n            return;\n        }\n        // If there's no element with the id, we check the `name` property\n        // To mirror browsers\n        const nameEl = document.getElementsByName(hash)[0];\n        if (nameEl) {\n            nameEl.scrollIntoView();\n        }\n    }\n    urlIsNew(asPath) {\n        return this.asPath !== asPath;\n    }\n    /**\n     * Prefetch `page` code, you may wait for the data during `page` rendering.\n     * This feature only works in production!\n     * @param url of prefetched `page`\n     */\n    prefetch(url) {\n        return new Promise((resolve, reject) => {\n            const { pathname, protocol } = url_1.parse(url);\n            if (!pathname || protocol) {\n                if (process.env.NODE_ENV !== 'production') {\n                    throw new Error(`Invalid href passed to router: ${url} https://err.sh/zeit/next.js/invalid-href-passed`);\n                }\n                return;\n            }\n            // Prefetch is not supported in development mode because it would trigger on-demand-entries\n            if (process.env.NODE_ENV !== 'production')\n                return;\n            // @ts-ignore pathname is always defined\n            const route = toRoute(pathname);\n            this.pageLoader.prefetch(route).then(resolve, reject);\n        });\n    }\n    async fetchComponent(route) {\n        let cancelled = false;\n        const cancel = (this.clc = () => {\n            cancelled = true;\n        });\n        const Component = await this.pageLoader.loadPage(route);\n        if (cancelled) {\n            const error = new Error(`Abort fetching component for route: \"${route}\"`);\n            error.cancelled = true;\n            throw error;\n        }\n        if (cancel === this.clc) {\n            this.clc = null;\n        }\n        return Component;\n    }\n    async getInitialProps(Component, ctx) {\n        let cancelled = false;\n        const cancel = () => {\n            cancelled = true;\n        };\n        this.clc = cancel;\n        const { Component: App } = this.components['/_app'];\n        let props;\n        if (\n        // @ts-ignore workaround for dead-code elimination\n        (self.__HAS_SPR || process.env.NODE_ENV !== 'production') &&\n            Component.__NEXT_SPR) {\n            let status;\n            // pathname should have leading slash\n            let { pathname } = url_1.parse(ctx.asPath || ctx.pathname);\n            pathname = !pathname || pathname === '/' ? '/index' : pathname;\n            props = await fetch(\n            // @ts-ignore __NEXT_DATA__\n            `/_next/data/${__NEXT_DATA__.buildId}${pathname}.json`)\n                .then(res => {\n                if (!res.ok) {\n                    status = res.status;\n                    throw new Error('failed to load prerender data');\n                }\n                return res.json();\n            })\n                .catch((err) => {\n                console.error(`Failed to load data`, status, err);\n                window.location.href = pathname;\n                return new Promise(() => { });\n            });\n        }\n        else {\n            const AppTree = this._wrapApp(App);\n            ctx.AppTree = AppTree;\n            props = await utils_1.loadGetInitialProps(App, {\n                AppTree,\n                Component,\n                router: this,\n                ctx,\n            });\n        }\n        if (cancel === this.clc) {\n            this.clc = null;\n        }\n        if (cancelled) {\n            const err = new Error('Loading initial props cancelled');\n            err.cancelled = true;\n            throw err;\n        }\n        return props;\n    }\n    abortComponentLoad(as) {\n        if (this.clc) {\n            const e = new Error('Route Cancelled');\n            e.cancelled = true;\n            Router.events.emit('routeChangeError', e, as);\n            this.clc();\n            this.clc = null;\n        }\n    }\n    notify(data) {\n        this.sub(data, this.components['/_app'].Component);\n    }\n}\nRouter.events = mitt_1.default();\nexports.default = Router;\n"]},"metadata":{},"sourceType":"script"}