{"ast":null,"code":"import _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Media, Player, controls } from 'react-media-player';\nimport PlayPause from '../../mp3Player/withMediaProps';\nimport TrackContainer from \"../TrackContainer\";\nimport { MUSIC, SONGS_IMAGES } from \"../../constants\";\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport AlbumIcon from '@material-ui/icons/Album';\nimport Image from \"../Image\";\nimport { Typography } from \"@material-ui/core\";\nvar CurrentTime = controls.CurrentTime,\n    SeekBar = controls.SeekBar,\n    Duration = controls.Duration,\n    Volume = controls.Volume,\n    MuteUnmute = controls.MuteUnmute;\n\nvar Panner =\n/*#__PURE__*/\nfunction () {\n  function Panner(_ref) {\n    var source = _ref.source,\n        audioContext = _ref.audioContext,\n        _ref$panningAmount = _ref.panningAmount,\n        panningAmount = _ref$panningAmount === void 0 ? 0 : _ref$panningAmount;\n\n    _classCallCheck(this, Panner);\n\n    this._source = source;\n    this._audioContext = audioContext;\n    this._initialPanningAmount = panningAmount;\n  }\n\n  _createClass(Panner, [{\n    key: \"connect\",\n    value: function connect() {\n      this._splitter = this._audioContext.createChannelSplitter(2);\n      this._gainLeft = this._audioContext.createGain();\n      this._gainRight = this._audioContext.createGain();\n      this._merger = this._audioContext.createChannelMerger(2);\n\n      this._source.connect(this._splitter, 0, 0);\n\n      this._splitter.connect(this._gainLeft, 0);\n\n      this._splitter.connect(this._gainRight, 1);\n\n      this._gainLeft.connect(this._merger, 0, 0);\n\n      this._gainRight.connect(this._merger, 0, 1);\n\n      return this._merger;\n    }\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(amount) {\n      this._gainLeft.gain.value = amount <= 0 ? 1 : 1 - amount;\n      this._gainRight.gain.value = amount >= 0 ? 1 : 1 + amount;\n    }\n  }]);\n\n  return Panner;\n}();\n\nvar tracks = [{\n  id: 0,\n  name: 'Lato 99',\n  mp3Name: 'Lato_99',\n  artist: 'Naydis',\n  imgSrc: SONGS_IMAGES.Naydis\n}, {\n  id: 1,\n  name: 'Życie To Są Chwile',\n  artist: 'Akcent',\n  mp3Name: 'ZycieToSaChwile',\n  imgSrc: SONGS_IMAGES.Akcent\n}, {\n  id: 2,\n  name: 'Tressure',\n  mp3Name: 'Tressure',\n  imgSrc: SONGS_IMAGES.Bruno_Mars\n}, {\n  id: 3,\n  name: 'BrunoMarsBezFoto',\n  mp3Name: 'Tressure'\n}];\n\nvar PlayerCustomized =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PlayerCustomized, _Component);\n\n  function PlayerCustomized() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PlayerCustomized);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PlayerCustomized)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      actualPlayingTrackMp3Name: tracks[0].mp3Name,\n      autoplay: false,\n      isPlaying: false,\n      actualSongImage: '',\n      actualSongName: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_connectSource\", function (source, audioContext) {\n      _this.panner = new Panner({\n        source: source,\n        audioContext: audioContext\n      });\n      return _this.panner.connect();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"trackList\", function () {\n      return tracks.map(function (track) {\n        return __jsx(TrackContainer, {\n          key: track.name,\n          track: track,\n          actualPlayingTrackMp3Name: _this.state.actualPlayingTrackMp3Name,\n          onClickPlay: function onClickPlay() {\n            return _this.setState({\n              actualPlayingTrackMp3Name: track.mp3Name,\n              actualSongName: track.name,\n              autoplay: true,\n              isPlaying: true,\n              actualSongImage: track.imgSrc ? track.imgSrc : SONGS_IMAGES.DefaultSongImage\n            });\n          }\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"playNextSong\", function () {\n      console.log('wlaczam kolejny numer');\n    });\n\n    return _this;\n  }\n\n  _createClass(PlayerCustomized, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        actualSongImage: tracks[0].imgSrc\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var classes = this.props.classes;\n      return __jsx(Media, {\n        ref: function ref(c) {\n          return _this2.media = c;\n        }\n      }, __jsx(\"div\", {\n        className: classes.mainContainer\n      }, __jsx(\"div\", {\n        className: classes.albumImageContainer\n      }, __jsx(\"div\", {\n        className: classes.songImageContainer\n      }, __jsx(Image, {\n        imgSrc: this.state.actualSongImage,\n        className: classes.actualImage\n      })), __jsx(Typography, null, this.state.actualSongName ? this.state.actualSongName : 'Wybierz utwor'), __jsx(PlayPause, null), __jsx(\"div\", {\n        className: classes.seekBarContainer\n      }, __jsx(\"div\", {\n        className: classes.playerTime\n      }, __jsx(CurrentTime, null), \"/\", __jsx(Duration, null)), __jsx(\"div\", {\n        className: classes.seekBar\n      }, __jsx(SeekBar, {\n        style: {\n          width: '100%'\n        }\n      }))), __jsx(\"div\", {\n        className: classes.actualSongPlayer\n      }, __jsx(Player, {\n        ref: function ref(c) {\n          return _this2._player = c;\n        },\n        src: \"/mp3/\".concat(this.state.actualPlayingTrackMp3Name, \".mp3\"),\n        connectSource: this._connectSource,\n        useAudioObject: true,\n        autoPlay: this.state.autoplay,\n        isPlaying: this.state.isPlaying,\n        onEnded: this.playNextSong\n      }))), __jsx(\"div\", {\n        className: classes.trackList\n      }, this.trackList())));\n    }\n  }]);\n\n  return PlayerCustomized;\n}(Component);\n\nexport default PlayerCustomized;","map":null,"metadata":{},"sourceType":"module"}