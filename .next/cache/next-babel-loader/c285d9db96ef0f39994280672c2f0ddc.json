{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { MENU_ITEMS } from \"../../../constants\";\nimport MyMenuItem from \"../../MenuItem/MenuItem.style\"; //TODO to trzeba poprawic bo sie wiesza\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      display: 'flex'\n    },\n    paper: {\n      marginRight: theme.spacing(2)\n    },\n    buttonBurgerMenu: {\n      height: '3rem',\n      margin: '1rem',\n      width: 'auto',\n      boxShadow: \"1px 0 5px 1px rgb(0,0,0,0.2)\" // borderRadius: '50%',\n\n    }\n  };\n});\n\nvar getMenuItems = function getMenuItems() {\n  return MENU_ITEMS.map(function (_ref) {\n    var name = _ref.name,\n        link = _ref.link;\n    return __jsx(MyMenuItem, {\n      key: name,\n      title: name,\n      href: link\n    });\n  });\n};\n\nexport default function MenuListComposition() {\n  var classes = useStyles();\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var anchorRef = React.useRef(null);\n\n  var handleToggle = function handleToggle() {\n    setOpen(function (prevOpen) {\n      return !prevOpen;\n    });\n  };\n\n  var handleClose = function handleClose(event) {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  function handleListKeyDown(event) {\n    if (event.key === 'Tab') {\n      event.preventDefault();\n      setOpen(false);\n    }\n  } // return focus to the button when we transitioned from !open -> open\n\n\n  var prevOpen = React.useRef(open);\n  React.useEffect(function () {\n    if (prevOpen.current === true && open === false) {\n      anchorRef.current.focus();\n    }\n\n    prevOpen.current = open;\n  }, [open]);\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(\"div\", null, __jsx(Button, {\n    ref: anchorRef,\n    \"aria-controls\": open ? 'menu-list-grow' : undefined,\n    \"aria-haspopup\": \"true\",\n    onClick: handleToggle,\n    className: classes.buttonBurgerMenu\n  }, __jsx(MenuIcon, null))), __jsx(Popper, {\n    open: open,\n    anchorEl: anchorRef.current,\n    role: undefined,\n    transition: true,\n    disablePortal: true\n  }, function (_ref2) {\n    var TransitionProps = _ref2.TransitionProps,\n        placement = _ref2.placement;\n    return __jsx(Grow, _extends({}, TransitionProps, {\n      style: {\n        transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom'\n      }\n    }), __jsx(Paper, null, __jsx(ClickAwayListener, {\n      onClickAway: handleClose\n    }, __jsx(MenuList, {\n      autoFocusItem: open,\n      id: \"menu-list-grow\",\n      onKeyDown: handleListKeyDown\n    }, getMenuItems()))));\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}