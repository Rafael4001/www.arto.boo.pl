{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\IT_projects_Edu-Lab\\\\www.zespolarto.pl\\\\src\\\\components\\\\TrackContainer\\\\TrackContainer.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport classNames from 'classnames';\nimport { withMediaProps } from 'react-media-player';\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\nimport PauseCircleFilledIcon from '@material-ui/icons/PauseCircleFilled';\nimport Button from \"@material-ui/core/Button\";\nimport { SONGS_IMAGES } from \"../../constants\";\nimport Image from \"../Image\";\n\nclass TrackContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"_handlePlayPause\", () => {\n      this.props.media.playPause();\n    });\n\n    _defineProperty(this, \"handlePlayClick\", () => {\n      this.props.onClickPlay();\n      this.props.media.play();\n    });\n  }\n\n  shouldComponentUpdate({\n    media\n  }) {\n    return this.props.media.isPlaying !== media.isPlaying;\n  }\n\n  render() {\n    const {\n      classes,\n      track,\n      actualPlayingTrackMp3Name,\n      media\n    } = this.props;\n    console.log(track);\n    console.log('actualPlayingTrackMp3Name', actualPlayingTrackMp3Name);\n    const trackImage = track.imgSrc ? track.imgSrc : SONGS_IMAGES.DefaultSongImage;\n    return __jsx(\"div\", {\n      className: classNames(classes.mainContainer, {\n        [classes.activeBackground]: actualPlayingTrackMp3Name === track.mp3Name\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: classes.songImage,\n      onClick: this.handlePlayClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, __jsx(Image, {\n      imgSrc: trackImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    })), actualPlayingTrackMp3Name === track.mp3Name && media.isPlaying ? __jsx(Button, {\n      className: classes.myButton,\n      key: track.mp3Name,\n      onClick: media.pause,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, __jsx(PauseCircleFilledIcon, {\n      className: classes.buttonIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    })) : __jsx(Button, {\n      className: classes.myButton,\n      key: track.mp3Name,\n      onClick: this.handlePlayClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, __jsx(PlayCircleFilledIcon, {\n      className: classes.buttonIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    })), __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: classes.trackName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, track.name), __jsx(\"div\", {\n      className: classes.trackArtistText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"(\", track.artist && ` - ${track.artist}`, \")\")));\n  }\n\n}\n\nTrackContainer.propTypes = {\n  classes: PropTypes.object.isRequired,\n  track: PropTypes.object.isRequired,\n  onClick: PropTypes.func.isRequired,\n  actualPlayingTrackMp3Name: PropTypes.string\n};\nTrackContainer.displayName = 'TrackContainer';\nexport default withMediaProps(TrackContainer);","map":{"version":3,"sources":["C:/IT_projects_Edu-Lab/www.zespolarto.pl/src/components/TrackContainer/TrackContainer.js"],"names":["React","Component","PropTypes","classNames","withMediaProps","PlayCircleFilledIcon","PauseCircleFilledIcon","Button","SONGS_IMAGES","Image","TrackContainer","props","media","playPause","onClickPlay","play","shouldComponentUpdate","isPlaying","render","classes","track","actualPlayingTrackMp3Name","console","log","trackImage","imgSrc","DefaultSongImage","mainContainer","activeBackground","mp3Name","songImage","handlePlayClick","myButton","pause","buttonIcon","trackName","name","trackArtistText","artist","propTypes","object","isRequired","onClick","func","string","displayName"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from \"prop-types\";\r\nimport classNames from 'classnames';\r\nimport { withMediaProps } from 'react-media-player'\r\n\r\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\r\nimport PauseCircleFilledIcon from '@material-ui/icons/PauseCircleFilled';\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport { SONGS_IMAGES } from \"../../constants\";\r\n\r\nimport Image from \"../Image\";\r\n\r\n\r\nclass TrackContainer extends Component {\r\n  shouldComponentUpdate({media}) {\r\n    return this.props.media.isPlaying !== media.isPlaying\r\n  }\r\n\r\n  _handlePlayPause = () => {\r\n    this.props.media.playPause()\r\n  }\r\n\r\n\r\n  handlePlayClick = () => {\r\n    this.props.onClickPlay();\r\n    this.props.media.play()\r\n  };\r\n\r\n\r\n  render() {\r\n    const {classes, track, actualPlayingTrackMp3Name, media} = this.props;\r\n\r\n    console.log(track)\r\n    console.log('actualPlayingTrackMp3Name', actualPlayingTrackMp3Name)\r\n\r\n\r\n    const trackImage = track.imgSrc ? track.imgSrc : SONGS_IMAGES.DefaultSongImage;\r\n\r\n    return (\r\n      <div className={classNames(classes.mainContainer, {[classes.activeBackground]: actualPlayingTrackMp3Name === track.mp3Name})}>\r\n        <div\r\n          className={classes.songImage}\r\n          onClick={this.handlePlayClick}\r\n        >\r\n          <Image imgSrc={trackImage}/>\r\n        </div>\r\n        {actualPlayingTrackMp3Name === track.mp3Name && media.isPlaying ?\r\n          (<Button\r\n            className={classes.myButton}\r\n            key={track.mp3Name}\r\n            onClick={media.pause}\r\n          >\r\n            <PauseCircleFilledIcon className={classes.buttonIcon}/>\r\n          </Button>)\r\n          :\r\n          (<Button\r\n            className={classes.myButton}\r\n            key={track.mp3Name}\r\n            onClick={this.handlePlayClick}\r\n          >\r\n            <PlayCircleFilledIcon className={classes.buttonIcon}/>\r\n          </Button>)\r\n        }\r\n        <div>\r\n          <div className={classes.trackName}>{track.name}</div>\r\n\r\n          <div className={classes.trackArtistText}>({track.artist && ` - ${track.artist}`})</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nTrackContainer.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  track: PropTypes.object.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n  actualPlayingTrackMp3Name: PropTypes.string,\r\n};\r\n\r\nTrackContainer.displayName = 'TrackContainer';\r\n\r\n\r\nexport default withMediaProps(TrackContainer)\r\n"]},"metadata":{},"sourceType":"module"}