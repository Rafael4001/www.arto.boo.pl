{"version":3,"file":"static/webpack/static\\development\\pages\\demo.js.d2eb93b9459cebb77bca.hot-update.js","sources":["webpack:///./src/components/PlayerCustomized/PlayerCustomized.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { Media, Player, controls } from 'react-media-player'\r\nimport PlayPause from '../../mp3Player/withMediaProps'\r\nimport TrackContainer from \"../TrackContainer\";\r\nimport { MUSIC, SONGS_IMAGES } from \"../../constants\";\r\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\r\nimport AlbumIcon from '@material-ui/icons/Album';\r\n\r\nimport Image from \"../Image\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { TRACK_LIST } from \"../../trackList\";\r\n\r\n\r\nconst {\r\n  CurrentTime,\r\n  // Progress,\r\n  SeekBar,\r\n  Duration,\r\n  Volume,\r\n  // Fullscreen,\r\n  MuteUnmute,\r\n  // autoplay,\r\n  // isPlaying\r\n} = controls;\r\n\r\n\r\nclass Panner {\r\n  constructor({source, audioContext, panningAmount = 0}) {\r\n    this._source = source;\r\n    this._audioContext = audioContext;\r\n    this._initialPanningAmount = panningAmount;\r\n  }\r\n\r\n  connect() {\r\n    this._splitter = this._audioContext.createChannelSplitter(2);\r\n    this._gainLeft = this._audioContext.createGain();\r\n    this._gainRight = this._audioContext.createGain();\r\n    this._merger = this._audioContext.createChannelMerger(2);\r\n    this._source.connect(\r\n      this._splitter,\r\n      0,\r\n      0\r\n    );\r\n    this._splitter.connect(\r\n      this._gainLeft,\r\n      0\r\n    );\r\n    this._splitter.connect(\r\n      this._gainRight,\r\n      1\r\n    );\r\n    this._gainLeft.connect(\r\n      this._merger,\r\n      0,\r\n      0\r\n    );\r\n    this._gainRight.connect(\r\n      this._merger,\r\n      0,\r\n      1\r\n    );\r\n    return this._merger\r\n  }\r\n\r\n  setPosition(amount) {\r\n    this._gainLeft.gain.value = amount <= 0 ? 1 : 1 - amount;\r\n    this._gainRight.gain.value = amount >= 0 ? 1 : 1 + amount;\r\n  }\r\n}\r\n\r\nconst tracks = TRACK_LIST;\r\n\r\nclass PlayerCustomized extends Component {\r\n  state = {\r\n    actualPlayingTrackMp3Name: tracks[0].mp3Name,\r\n    autoplay: false,\r\n    isPlaying: false,\r\n    actualSongImage: '',\r\n    actualSongName: '',\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      actualSongImage: tracks[0].imgSrc\r\n    })\r\n  }\r\n\r\n\r\n  _connectSource = (source, audioContext) => {\r\n    this.panner = new Panner({source, audioContext});\r\n    return this.panner.connect()\r\n  };\r\n\r\n\r\n  trackList = () => (\r\n    tracks.map(track => {\r\n\r\n      console.log(track)\r\n      console.log('this.state.actualPlayingTrackMp3Name',this.state.actualPlayingTrackMp3Name)\r\n\r\n      return (\r\n        <TrackContainer\r\n          key={track.name}\r\n          track={track}\r\n          actualPlayingTrackMp3Name={this.state.actualPlayingTrackMp3Name}\r\n          onClickPlay={() => {\r\n            return (\r\n              this.setState({\r\n                actualPlayingTrackMp3Name: track.mp3Name,\r\n                actualSongName: track.name,\r\n                autoplay: true,\r\n                isPlaying: true,\r\n                actualSongImage: track.imgSrc ? track.imgSrc : SONGS_IMAGES.DefaultSongImage,\r\n              })\r\n            )\r\n          }}\r\n        />\r\n      )\r\n    })\r\n  );\r\n\r\n  showWhatSongIsPlaying = (song) => {\r\n    return song.mp3Name === this.state.actualPlayingTrackMp3Name\r\n  };\r\n\r\n\r\n  playNextSong = () => {\r\n    const actualSongIndex = tracks.findIndex(this.showWhatSongIsPlaying);\r\n    const newSongIndex = actualSongIndex + 1;\r\n    const nextSong = tracks[newSongIndex];\r\n\r\n    this.setState({\r\n      actualPlayingTrackMp3Name: nextSong.mp3Name,\r\n      actualSongName: nextSong.name,\r\n      autoplay: true,\r\n      isPlaying: true,\r\n      actualSongImage: nextSong.imgSrc ? nextSong.imgSrc : SONGS_IMAGES.DefaultSongImage,\r\n    })\r\n  };\r\n\r\n\r\n  render() {\r\n    const {classes} = this.props;\r\n\r\n    return (\r\n      <Media ref={c => (this.media = c)}>\r\n        <div className={classes.mainContainer}>\r\n          <div className={classes.albumImageContainer}>\r\n            <div className={classes.songImageContainer}>\r\n              <Image\r\n                imgSrc={this.state.actualSongImage}\r\n                className={classes.actualImage}\r\n              />\r\n            </div>\r\n            <Typography>{this.state.actualSongName ? this.state.actualSongName : 'Wybierz utwor'}</Typography>\r\n\r\n            <PlayPause/>\r\n            {/*<div className={classes.volumeContainer}>*/}\r\n            {/*  <div className={classes.volumeText}><VolumeUpIcon/></div>*/}\r\n            {/*  <Volume className={this.props.volume}/>*/}\r\n            {/*</div>*/}\r\n            <div className={classes.seekBarContainer}>\r\n              <div className={classes.playerTime}><CurrentTime/>/<Duration/></div>\r\n              <div className={classes.seekBar}><SeekBar style={{width: '100%'}}/></div>\r\n            </div>\r\n            <div className={classes.actualSongPlayer}>\r\n              <Player\r\n                ref={c => (this._player = c)}\r\n                src={`/mp3/${this.state.actualPlayingTrackMp3Name}.mp3`}\r\n                connectSource={this._connectSource}\r\n                useAudioObject\r\n                autoPlay={this.state.autoplay}\r\n                isPlaying={this.state.isPlaying}\r\n                onEnded={this.playNextSong}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className={classes.trackList}>\r\n            {this.trackList()}\r\n          </div>\r\n\r\n        </div>\r\n      </Media>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default PlayerCustomized\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AAKA;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AAGA;AACA;AAGA;AACA;AAIA;AACA;AAIA;AACA;;;AAEA;AACA;AACA;AACA;;;;;;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAcA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAxBA;AACA;AA0BA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;;;;;;AA1DA;AACA;AACA;AADA;AAGA;;;AAwlHA;AACA;AAoHA;;;;A","sourceRoot":""}